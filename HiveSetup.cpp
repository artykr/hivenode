#include "HiveSetup.h"
#include "LightSwitch.h"
#include "PirSwitch.h"
#include "HiveStorage.h"
#include "DHTSensor.h"
#include "DHTSwitch.h"
#include "OWTSensor.h"

#ifdef HIVE_STATIC_IP
IPAddress nodeIPAddress(192,168,1,60);
#endif

#ifndef HIVE_STATIC_IP
IPAddress nodeIPAddress;
#endif

// Initialize global structures
SensorModule *sensorModuleArray[modulesCount];

// Settings storage file name (for SD card storage)
char StorageFileName[16] = "settings.bin"; // 12 characters long maximum

uint8_t SettingsOffset = 4;

// Init MAC adress of the Ethernet shield
// First 3 octets are OUI (Organizationally Unique Identifier)
// of GHEO Sa company. Other 3 octets will be randomly generated.
// orig. from http://nicegear.co.nz/blog/autogenerated-random-persistent-mac-address-for-arduino-ethernet/
byte hivemac[6] = { 0x90, 0xA2, 0xDA, 0x00, 0x00, 0x00 };

void initModules(AppContext *context, boolean loadSettings) {
  int lastStoragePointer = SettingsOffset;

  // If we're using SD card, there's no need to have on offset for system settings
  // which go to the EEPROM instead
  if (StorageType == SDStorage) {
  	lastStoragePointer = 0;
  }

  // Create objects for all sensor modules and init each one
  sensorModuleArray[0] = new LightSwitch(context, hallZone, 1, lastStoragePointer, loadSettings, 26, 27);
  lastStoragePointer += sensorModuleArray[0]->getStorageSize();

  sensorModuleArray[1] = new OWTSensor(context, kitchenZone, 2, lastStoragePointer, loadSettings, 15);
  lastStoragePointer += sensorModuleArray[1]->getStorageSize();

  //sensorModuleArray[1] = new PirSwitch(context, hallZone, 2, lastStoragePointer, loadSettings, 11, 5);
  //lastStoragePointer += sensorModuleArray[1]->getStorageSize();

  // DHTSensor *sensor = new DHTSensor(context, kitchenZone, 3, lastStoragePointer, loadSettings, 12);

  //sensorModuleArray[2] = sensor;
  //lastStoragePointer += sensorModuleArray[2]->getStorageSize();

  //sensorModuleArray[3] = new DHTSwitch(context, sensor, kitchenZone, 3, lastStoragePointer, loadSettings, 65535, 50, 20, 0, 1, 6);
  //lastStoragePointer += sensorModuleArray[2]->getStorageSize();

  // DEBUG
  Serial.println(F("Modules array setup finished"));
}
